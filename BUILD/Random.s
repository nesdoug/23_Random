;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_vram_adr
	.import		_vram_write
	.import		_get_frame_count
	.import		_seed_rng
	.export		_metasprite
	.export		_metasprite2
	.export		_sprid
	.export		_pad1
	.export		_start_pressed
	.export		_index
	.export		_spr_x
	.export		_spr_y
	.export		_text
	.export		_palette_bg
	.export		_palette_sp
	.export		_main

.segment	"RODATA"

_metasprite:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$11
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$11
	.byte	$40
	.byte	$80
_metasprite2:
	.byte	$08
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$13
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$12
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$22
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$23
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$22
	.byte	$40
	.byte	$80
_text:
	.byte	$50,$72,$65,$73,$73,$20,$53,$74,$61,$72,$74,$00
_palette_bg:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_sprid:
	.res	1,$00
_pad1:
	.res	1,$00
_start_pressed:
	.res	1,$00
_index:
	.res	1,$00
.segment	"BSS"
_spr_x:
	.res	64,$00
_spr_y:
	.res	64,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(7,14)); // set a start position for the text
;
	ldx     #$21
	lda     #$C7
	jsr     _vram_adr
;
; vram_write(text,sizeof(text));
;
	lda     #<(_text)
	ldx     #>(_text)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _vram_write
;
; ppu_on_all(); // turn on screen
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
L0068:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; sprid = 0;
;
	lda     #$00
	sta     _sprid
;
; pad1 = pad_poll(0); // read the first controller
;
	jsr     _pad_poll
	sta     _pad1
;
; if(!start_pressed){
;
	lda     _start_pressed
	bne     L0073
;
; if(pad1 & PAD_START){
;
	lda     _pad1
	and     #$10
	beq     L0068
;
; ++start_pressed;
;
	inc     _start_pressed
;
; seed_rng(); // the frame count was ticking up every frame till Start pressed
;
	jsr     _seed_rng
;
; for(index=0;index<64;++index){
;
	lda     #$00
	sta     _index
L00D6:	lda     _index
	cmp     #$40
	bcs     L0068
;
; spr_x[index] = rand8(); //fill the arrays with random #s
;
	lda     #<(_spr_x)
	ldx     #>(_spr_x)
	clc
	adc     _index
	bcc     L0083
	inx
L0083:	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; spr_y[index] = rand8();
;
	lda     #<(_spr_y)
	ldx     #>(_spr_y)
	clc
	adc     _index
	bcc     L0087
	inx
L0087:	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; for(index=0;index<64;++index){
;
	inc     _index
	jmp     L00D6
;
; for(index=0;index<25;++index){
;
L0073:	lda     #$00
	sta     _index
L00D7:	lda     _index
	cmp     #$19
	bcs     L00D8
;
; if(get_frame_count() & 1){ // half the time
;
	jsr     _get_frame_count
	and     #$01
	beq     L0092
;
; spr_y[index] = spr_y[index] + 1; // fall
;
	lda     #<(_spr_y)
	ldx     #>(_spr_y)
	clc
	adc     _index
	bcc     L0096
	inx
L0096:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _spr_y,y
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; sprid = oam_spr(spr_x[index], spr_y[index], 0, 0, sprid);
;
L0092:	jsr     decsp4
	ldy     _index
	lda     _spr_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _index
	lda     _spr_y,y
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _sprid
	jsr     _oam_spr
	sta     _sprid
;
; for(index=0;index<25;++index){
;
	inc     _index
	jmp     L00D7
;
; for( ;index<55;++index){
;
L00D8:	lda     _index
	cmp     #$37
	bcs     L00D9
;
; spr_y[index] = spr_y[index] + 1; // fall
;
	lda     #<(_spr_y)
	ldx     #>(_spr_y)
	clc
	adc     _index
	bcc     L00AE
	inx
L00AE:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _spr_y,y
	clc
	adc     #$01
	ldy     #$00
	sta     (ptr1),y
;
; sprid = oam_spr(spr_x[index], spr_y[index], 0, 0, sprid);
;
	jsr     decsp4
	ldy     _index
	lda     _spr_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _index
	lda     _spr_y,y
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _sprid
	jsr     _oam_spr
	sta     _sprid
;
; for( ;index<55;++index){
;
	inc     _index
	jmp     L00D8
;
; for( ;index<64;++index){
;
L00D9:	lda     _index
	cmp     #$40
	jcs     L0068
;
; spr_y[index] = spr_y[index] + 2; // fall fast
;
	lda     #<(_spr_y)
	ldx     #>(_spr_y)
	clc
	adc     _index
	bcc     L00C6
	inx
L00C6:	sta     ptr1
	stx     ptr1+1
	ldy     _index
	lda     _spr_y,y
	clc
	adc     #$02
	ldy     #$00
	sta     (ptr1),y
;
; sprid = oam_spr(spr_x[index], spr_y[index], 0, 0, sprid);
;
	jsr     decsp4
	ldy     _index
	lda     _spr_x,y
	ldy     #$03
	sta     (sp),y
	ldy     _index
	lda     _spr_y,y
	ldy     #$02
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	dey
	sta     (sp),y
	lda     _sprid
	jsr     _oam_spr
	sta     _sprid
;
; for( ;index<64;++index){
;
	inc     _index
	jmp     L00D9

.endproc

